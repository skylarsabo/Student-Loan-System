@page "{handler?}"
@model StudentLoanSystem.Data.AccountData
@using System.Data
@{
    ViewData["Title"] = "Student";
    @functions{
        int i = 0;
        int j = 0;
        public void OnGet(StudentLoanSystem.Data.Users.Student student)
        {
            //System.Diagnostics.Debug.WriteLine(student.Username);
            //DropDownList1.Items.Insert(0, new ListItem("Add New", ""));
            //@Html.DropDownList(StudentLoanSystem.Data.AccountData.)

        }
        public async Task OnPostSelectLoanAsync()
        {
            StudentLoanSystem.Data.Users.Student student = StudentLoanSystem.Data.AccountData.CurrentStudent;
            String selectedValue = Request.Form["selectedLoanValue"];
            List<StudentLoanSystem.Data.Loan> loanList = StudentLoanSystem.Data.AccountData.LoanList;
            StudentLoanSystem.Data.Loan tempLoan = new StudentLoanSystem.Data.Loan();

            foreach (StudentLoanSystem.Data.Loan loan in loanList)
            {
                if (loan.principle.ToString().Equals(selectedValue))
                {
                    tempLoan = loan;
                }
            }
            student.loanApplyingFor = tempLoan;
            StudentLoanSystem.Data.AccountData.ApplyForLoan(student);
            RedirectToPage("UserPages/StudentView", StudentLoanSystem.Data.AccountData.CreateUser(student.Username, student.Id));
            //System.Diagnostics.Debug.WriteLine("TEST " + student.FirstName + " " + student.loanApplyingFor.loanName);
        }
        public async Task OnPostSelectAppliedAsync()
        {
            StudentLoanSystem.Data.Users.Student student = StudentLoanSystem.Data.AccountData.CurrentStudent;
            String selectedValue = Request.Form["selectedAppliedforLoan"];
            try
            {
                i = Int32.Parse(selectedValue) - 1;
            }
            catch(Exception e)
            {

            }


        }
        public async Task OnPostSelectCurrentAsync()
        {
            StudentLoanSystem.Data.Users.Student student = StudentLoanSystem.Data.AccountData.CurrentStudent;
            String selectedValue = Request.Form["selectedCurrentLoan"];
            try
            {
                j = Int32.Parse(selectedValue) - 1;
            }
            catch (Exception e)
            {

            }
        }
    }

}
<html>
<head>
    <meta name="viewport" content="width=device-width" />
</head>
<body>

    <div class="container">
        <div class="row">
            <div class="col-md-10">
                <h2>
                    Hi @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.FirstName, StudentLoanSystem.Data.AccountData.CurrentStudent.FirstName, new { @class = "text-danger" }) @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.LastName, StudentLoanSystem.Data.AccountData.CurrentStudent.LastName, new { @class = "text-danger" }) welcome back!
                </h2>
                <div class="row">
                    <div class="col-md-4">
                        <!--Profile Information-->
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Profile Information for</h5>
                                <h6 class="card-subtitle mb-2 text-muted">@Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.FirstName, StudentLoanSystem.Data.AccountData.CurrentStudent.FirstName) @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.LastName, StudentLoanSystem.Data.AccountData.CurrentStudent.LastName)</h6>
                                <p class="card-text">
                                    Username: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.Username, StudentLoanSystem.Data.AccountData.CurrentStudent.Username, new { @class = "text-danger" }) <br />
                                    UserType: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.Id.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.Id.ToString(), new { @class = "text-danger" }) <br />
                                    Credit Score: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.creditScore.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.creditScore.ToString(), new { @class = "text-danger" }) <br />
                                    Student ID: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.StudentID.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.StudentID.ToString(), new { @class = "text-danger" }) <br />
                                    Student Email: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.Email, StudentLoanSystem.Data.AccountData.CurrentStudent.Email, new { @class = "text-danger" }) <br />
                                </p>
                            </div>
                        </div>
                        <br />
                        <!--Apply for Loans-->
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Apply for loan?</h5>
                                <form asp-page-handler="SelectLoan" method="post" role="form">
                                    <div class="input-group">
                                        @Html.DropDownList(StudentLoanSystem.Data.AccountData.LoanListItems.ToString(), StudentLoanSystem.Data.AccountData.LoanListItems, "Loans Available", new { @class = "form-control", @onChange = "ApplyForLoan(this)" })<br />
                                        <span class="input-group-btn">
                                            <Button class="input-group-addon btn btn-default">Apply For Loan</Button>
                                        </span>
                                        <input type="hidden" name="selectedLoanValue" id="selectedLoanValue" runat="server" />
                                        <script>
                                            function ApplyForLoan(ddlObject) {
                                                var selectedValue = ddlObject.value;
                                                var selectedText = ddlObject.options[ddlObject.selectedIndex].innerHTML;
                                                var hiddenField = document.getElementById('selectedLoanValue');
                                                hiddenField.value = selectedValue;
                                            }
                                        </script>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <!--Loan Student Already Has-->
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Loans Currently</h5>
                                <form asp-page-handler="SelectCurrent" method="post" role="form">
                                    <div class="input-group">
                                        @Html.DropDownList(StudentLoanSystem.Data.AccountData.CurrentStudentLoanItems.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudentLoanItems, "Your Loans", new { @class = "form-control", @onChange = "CurrentLoanListSelectedValue(this)" })<br />
                                        <span class="input-group-btn">
                                            <Button class="input-group-addon btn btn-default">See Loan Details</Button>
                                        </span>
                                        <input type="hidden" name="selectedCurrentLoan" id="selectedCurrentLoan" runat="server" />
                                        <script>
                                            function CurrentLoanListSelectedValue(ddlObject) {
                                                var selectedIndex = ddlObject.selectedIndex
                                                var hiddenField = document.getElementById('selectedCurrentLoan');
                                                hiddenField.value = selectedIndex;
                                            }
                                        </script>
                                    </div>
                                </form>
                                <br />
                                <div class="card">
                                    <div class="card-body">
                                        @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].loanName, StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].loanName, new { @class = "text-danger" }) <br />
                                        Principle: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].principle.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].principle.ToString(), new { @class = "text-danger" }) <br />
                                        Start Date: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].start.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].start.ToString(), new { @class = "text-danger" }) <br />
                                        Date Posted: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].postTime.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.currentStudentLoans[j].postTime.ToString(), new { @class = "text-danger" }) <br />
                                        Pay Amount / Due Date: <br />
                                    </div>
                                </div>
                                <br />
                                <button type="button" class="btn btn-success">Pay Loan</button>

                            </div>
                        </div>
                        <br />
                        <!--Loan applied for-->
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Loan Applying for</h5>
                                <form asp-page-handler="SelectApplied" method="post" role="form">
                                    <div class="input-group">
                                        @Html.DropDownList(StudentLoanSystem.Data.AccountData.ApplyLoanListItems.ToString(), StudentLoanSystem.Data.AccountData.ApplyLoanListItems, "Your Loans", new { @class = "form-control", @onChange = "LoanListSelectedValue(this)" })<br />
                                        <span class="input-group-btn">
                                            <Button class="input-group-addon btn btn-default">See Loan Details</Button>
                                        </span>
                                        <input type="hidden" name="selectedAppliedforLoan" id="selectedAppliedforLoan" runat="server" />
                                        <script>
                                            function LoanListSelectedValue(ddlObject) {
                                                var selectedIndex = ddlObject.selectedIndex
                                                var hiddenField = document.getElementById('selectedAppliedforLoan');
                                                hiddenField.value = selectedIndex;
                                            }
                                        </script>
                                    </div>
                                </form>
                                <br />
                                <div class="card">
                                    <div class="card-body">
                                        @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].loanName, StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].loanName, new { @class = "text-danger" }) <br />
                                        Principle: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].principle.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].principle.ToString(), new { @class = "text-danger" }) <br />
                                        Start Date: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].start.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].start.ToString(), new { @class = "text-danger" }) <br />
                                        Date Posted: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].postTime.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].postTime.ToString(), new { @class = "text-danger" }) <br />
                                        Approved? [1=yes,0=no]: @Html.Label(StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].approved.ToString(), StudentLoanSystem.Data.AccountData.CurrentStudent.ApplyForLoansList[i].approved.ToString(), new { @class = "text-danger" }) <br />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-2">
                <div class="row">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Index"><button type="button" class="btn btn-danger">Logout?</button></a>
                </div>
            </div>
        </div>
    </div>



</body>
</html>
